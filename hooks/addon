#!/bin/bash
set -eu
vault="secret/$GENESIS_VAULT_PREFIX"
declare -a ips
ips=( $(bosh vms --json | jq -r '.Tables[0].Rows[0].ips') )

list() {
  echo "The following addons are defined:"
  echo
  echo "  inventory           Take an inventory of software installed on the"
  echo "                      jumpbox and the versions present."
  echo
  echo "  ssh                 SSH (interactively) into the jumpbox."
  echo
  echo "  who                 See who is logged into the jumpbox, via SSH."
  echo "                      (requires the ability to login via SSH)"
  echo
  echo "If the 'openvpn' feature has been enabled, the following addons are also"
  echo "available:"
  echo
  echo "  generate-vpn-config <user>  Generate a client certificate (if missing)"
  echo "                              and an openvpn config file for a given user"
  echo
  echo "  certs                       List the VPN certificates for the users defined"
  echo "                              on the given jumpbox environment."
  echo
  echo "  issue-cert <user>           Issue a new VPN certificate to a named user,"
  echo "                              so that they can access the VPN."
  echo
  echo "  revoke-cert <user>          Revokes an issued VPN user certificate, preventing"
  echo "                              them from accessing the VPN."
  echo
  echo "  renew-cert <user>           Renew the lifetime of a previously-issued VPN"
  echo "                              certificate, without replacing the user's key."
  echo
  echo "  renew-all-certs             Renews the lifetime of all previously-issued VPN"
  echo "                              certificates on the server, without replacing the"
  echo "                              keys"
  echo
  echo "  reissue-cert <user>         Re-issue a VPN user certificate, regnerating the"
  echo "                              users key in the first place.  The old certificate"
  echo "                              will be revoked."
  echo
}

require_vpn() {
  if ! want_feature 'openvpn'; then
    echo >&2 "oops! this addon requires the 'openvpn' feature to be activated"
    echo >&2 "in the $GENESIS_ENVIRONMENT environment."
    exit 1
  fi
}

issue() {
  email=${1:-}
  if [[ -z ${email} ]]; then
    echo >&2 "USAGE: genesis do <env> -- issue-cert user@email.addr.ess"
    exit 1
  fi

  secret=$vault/openvpn/certs/users/$email
  safe x509 issue --signed-by $vault/openvpn/certs/ca \
                  --name $email \
                  -u digital_signature \
                  -u key_encipherment \
                  -u client_auth \
                  --ttl ${CERT_TTL:-180d} \
                  $secret

  if [[ ${2:-x} != "--quiet" ]]; then
    safe x509 show $secret
      echo "To get the certificate:"
    describe "  #C{safe read $secret:certificate}"
      echo
      echo "To get the private key:"
    describe "  #Y{safe read $secret:key}"
      echo
  fi
}

revoke() {
  email=${1:-}
  if [[ -z ${email} ]]; then
    echo >&2 "USAGE: genesis do <env> -- revoke-cert user@email.addr.ess"
    exit 1
  fi

  secret=$vault/openvpn/certs/users/$email
  if ! safe exists $secret; then
    echo "$email does not have a certificate in the Vault"
    exit 0
  fi
  safe x509 revoke --signed-by $vault/openvpn/certs/ca $secret
  safe rm $secret
  describe "revoked #Y{$email} VPN user certificate"
}

renew() {
  email=${1:-}
  if [[ -z ${email} ]]; then
    echo >&2 "USAGE: genesis do <env> -- renew-cert user@email.addr.ess"
    exit 1
  fi

  secret=$vault/openvpn/certs/users/$email
  safe x509 renew --signed-by $vault/openvpn/certs/ca $secret
  safe x509 show $secret
}

reissue() {
  email=${1:-}
  if [[ -z ${email} ]]; then
    echo >&2 "USAGE: genesis do <env> -- reissue-cert user@email.addr.ess"
    exit 1
  fi

  secret=$vault/openvpn/certs/users/$email
  safe x509 reissue --signed-by $vault/openvpn/certs/ca $secret
  safe x509 show $secret
}

generate_vpn_config() {
  email=${1:-}
  if [[ -z ${email} ]]; then
    echo >&2 "USAGE: genesis do <env> generate-vpn-config user@email.addr.ess"
    exit 1
  fi
  if ! safe --quiet check $vault/openvpn/certs/users/$email; then
    echo >&2 "Generating new openvpn client certificate for $email"
    issue $email --quiet
  fi
  if [[ $(lookup params.vpn_external_ip  $ips) == null ]]; then
    echo >&2 "Failed to get VPN External IP from BOSH or Params - check your connection to BOSH or params file"
    exit 1
  fi

  echo "client"
  echo "dev tun"
  echo "proto $(lookup params.vpn_protocol  tcp)"
  echo "remote $(lookup params.vpn_external_ip  $ips) $(lookup params.vpn_external_port  443)"
  echo "resolv-retry infinite"
  echo "nobind"
  echo "persist-key"
  echo "persist-tun"
  echo "mute-replay-warnings"
  echo "remote-cert-tls server"
  echo "verb 3"
  echo "mute 20"
  echo "tls-client"
  echo "cipher AES-256-CBC"
  echo "compress $(lookup params.vpn_compress  auto)"
  echo "$(lookup params.vpn_extra_client_configs | jq -r '.[]')"
  echo "<ca>"
  safe get $vault/openvpn/certs/ca:certificate
  echo "</ca>"
  echo "<cert>"
  safe get $vault/openvpn/certs/users/$email:certificate
  echo "</cert>"
  echo "<key>"
  safe get $vault/openvpn/certs/users/$email:key
  echo "</key>"
}

case $GENESIS_ADDON_SCRIPT in
list)
  list
  exit 0
  ;;

certs)
  n=0
  for secret in $(safe paths $vault/openvpn/certs/users 2>/dev/null); do
    safe x509 show $secret; echo ; echo
    n=$(( n + 1 ))
  done
  echo "$n VPN user certificates found"
  ;;

issue-cert)
  require_vpn
  issue "$@"
  ;;

revoke-cert)
  require_vpn
  revoke "$@"
  ;;

renew-cert)
  require_vpn
  renew "$@"
  ;;

renew-all-certs)
  require_vpn
  for secret in $(safe paths $vault/openvpn/certs/users 2>/dev/null); do
    safe x509 renew --signed-by $vault/openvpn/certs/ca $secret
    safe x509 show $secret
  done
  ;;

reissue-cert)
  require_vpn
  reissue "$@"
  ;;

generate-vpn-config)
  require_vpn
  generate_vpn_config "$@"
  ;;

inventory)
  exec bosh run-errand inventory
  ;;

ssh)
  exec ssh ${ips[0]} "$@"
  ;;

who)
  exec ssh ${ips[0]} -- who
  ;;

*)
  echo "Unrecognized Jumpbox Genesis Kit addon."
  list
  exit 1
  ;;
esac
