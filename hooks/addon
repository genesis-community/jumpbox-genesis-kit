#!/bin/bash
set -u

#Version check
min_version="2.7.0"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

list() {
  describe "$(cat <<EOF
The following addons are defined for the #C{$GENESIS_KIT_ID} kit:

  #G{inventory}                   Take an inventory of software installed on the
                              jumpbox and the versions present.

  #G{ssh}                         SSH (interactively) into the jumpbox.

  #G{who}                         See who is logged into the jumpbox, via SSH.
                              (requires the ability to login via SSH)

If the 'openvpn' feature has been enabled, the following addons are also
available:

  #G{generate-vpn-config <user>}  Generate a client certificate (if missing)
                              and an openvpn config file for a given user

  #G{certs}                       List the VPN certificates for the users defined
                              on the given jumpbox environment.

  #G{issue-cert <user>}           Issue a new VPN certificate to a named user,
                              so that they can access the VPN.

  #G{revoke-cert <user>}          Revokes an issued VPN user certificate, preventing
                              them from accessing the VPN.

  #G{renew-cert <user>}           Renew the lifetime of a previously-issued VPN
                              certificate for the specified user, without
                              replacing the key.

  #G{renew-all-certs}             Renews the lifetime of all previously-issued VPN
                              certificates on the server, without replacing the
                              keys

  #G{reissue-cert <user>}         Re-issue a VPN user certificate, regnerating the
                              users key in the first place.  The old certificate
                              will be revoked.

EOF
  )"
}

require_vpn() {
  if ! want_feature 'openvpn'; then
    echo >&2 "oops! this addon requires the 'openvpn' feature to be activated"
    echo >&2 "in the $GENESIS_ENVIRONMENT environment."
    exit 1
  fi
}

issue() {
  email=${1:-}
  if [[ -z ${email} ]]; then
    echo >&2 "USAGE: genesis do <env> -- issue-cert user@email.addr.ess"
    exit 1
  fi

  secret="${GENESIS_SECRETS_BASE}openvpn/certs/users/$email"
  safe x509 issue --signed-by "${GENESIS_SECRETS_BASE}openvpn/certs/ca" \
                  --name "$email" \
                  -u digital_signature \
                  -u key_encipherment \
                  -u client_auth \
                  --ttl "${CERT_TTL:-180d}" \
                  "$secret"

  if [[ ${2:-x} != "--quiet" ]]; then
    safe x509 show "$secret"
      echo "To get the certificate:"
    describe "  #C{safe read $secret:certificate}"
      echo
      echo "To get the private key:"
    describe "  #Y{safe read $secret:key}"
      echo
  fi
}

revoke() {
  email=${1:-}
  if [[ -z ${email} ]]; then
    echo >&2 "USAGE: genesis do <env> -- revoke-cert user@email.addr.ess"
    exit 1
  fi

  secret="${GENESIS_SECRETS_BASE}openvpn/certs/users/$email"
  if ! safe exists "$secret"; then
    echo "$email does not have a certificate in the Vault"
    exit 0
  fi
  safe x509 revoke --signed-by "${GENESIS_SECRETS_BASE}openvpn/certs/ca" "$secret"
  safe rm "$secret"
  describe "revoked #Y{$email} VPN user certificate"
}

renew() {
  email=${1:-}
  if [[ -z ${email} ]]; then
    echo >&2 "USAGE: genesis do <env> -- renew-cert user@email.addr.ess"
    exit 1
  fi

  secret="${GENESIS_SECRETS_BASE}openvpn/certs/users/$email"
  safe x509 renew --signed-by "${GENESIS_SECRETS_BASE}openvpn/certs/ca" "$secret"
  safe x509 show "$secret"
}

reissue() {
  email=${1:-}
  if [[ -z ${email} ]]; then
    echo >&2 "USAGE: genesis do <env> -- reissue-cert user@email.addr.ess"
    exit 1
  fi

  secret="${GENESIS_SECRETS_BASE}openvpn/certs/users/$email"
  safe x509 reissue --signed-by "${GENESIS_SECRETS_BASE}openvpn/certs/ca" "$secret"
  safe x509 show "$secret"
}

declare -a ips
generate_ip_list() {
  ips=( "$(bosh vms --json | jq -r '.Tables[0].Rows[0].ips')" )
}

generate_vpn_config() {
  if [[ "${#@}" == '0' ]] || [[ "${#@}" == '1' && "$1" == '-f' ]] ; then
    bail "USAGE: genesis do <env> generate-vpn-config [-f] user@email.addr.ess"
    exit 1
  fi

  regen=''
  if [[ "$1" == "-f" ]] ; then
    regen='1'
    shift
  fi
  email="$1"

  generate_ip_list;
  if ! safe --quiet check "${GENESIS_SECRETS_BASE}openvpn/certs/users/$email" || [[ -n $regen ]] ; then
    echo >&2 "Generating new openvpn client certificate for $email"
    issue "$email" --quiet
  fi
  if [[ $(lookup params.vpn_external_ip  "${ips[0]}") == null ]]; then
    echo >&2 "Failed to get VPN External IP from BOSH or Params - check your connection to BOSH or params file"
    exit 1
  fi

  cat <<EOF
client
dev tun
proto $(lookup params.vpn_protocol tcp)
remote $(lookup params.vpn_external_ip "${ips[0]}") $(lookup params.vpn_external_port 443)
resolv-retry infinite
nobind
persist-key
persist-tun
mute-replay-warnings
remote-cert-tls server
verb 3
mute 20
tls-client
cipher AES-256-CBC
compress $(lookup params.vpn_compress lz4-v2)
$(lookup params.vpn_extra_client_configs | jq -r '.[]')
<ca>
$(safe get "${GENESIS_SECRETS_BASE}openvpn/certs/ca:certificate")
</ca>
<cert>
$(safe get "${GENESIS_SECRETS_BASE}openvpn/certs/users/$email:certificate")
</cert>
<key>
$(safe get "${GENESIS_SECRETS_BASE}openvpn/certs/users/$email:key")
</key>
EOF
}

case $GENESIS_ADDON_SCRIPT in
list)
  list
  exit 0
  ;;

certs)
  n=0
  for secret in $(safe paths "${GENESIS_SECRETS_BASE}openvpn/certs/users" 2>/dev/null); do
    safe x509 show "$secret"; echo ; echo
    n=$(( n + 1 ))
  done
  echo "$n VPN user certificates found"
  ;;

issue-cert)
  require_vpn
  issue "$@"
  ;;

revoke-cert)
  require_vpn
  revoke "$@"
  ;;

renew-cert)
  require_vpn
  renew "$@"
  ;;

renew-all-certs)
  require_vpn
  for secret in $(safe paths "${GENESIS_SECRETS_BASE}openvpn/certs/users" 2>/dev/null); do
    safe x509 renew --signed-by "${GENESIS_SECRETS_BASE}openvpn/certs/ca" "$secret"
    safe x509 show "$secret"
  done
  ;;

reissue-cert)
  require_vpn
  reissue "$@"
  ;;

generate-vpn-config)
  require_vpn
  generate_vpn_config "$@"
  ;;

inventory)
  bosh run-errand inventory
  exit 0
  ;;

ssh)
  generate_ip_list;
  exec ssh "${ips[0]}" "$@"
  ;;

who)
  generate_ip_list;
  exec ssh "${ips[0]}" -- who
  ;;

*)
  echo "Unrecognized Jumpbox Genesis Kit addon."
  list
  exit 1
  ;;
esac
